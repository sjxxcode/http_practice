okhttp工作流程分析
1:构造Request
2:初始化OkHttpClient
3:构造Call,调用okhttpclient的newCall()构建ReadCall
4:调用ReadCall的execute()/enqueue()执行网络请求

----------------------------------------------------------------------------------------------------------------
Call它表示:一次client与server之间的网络交互(tcp连接，http报文的发送与接受，重试，重定向等操作)
getResponseWithInterceptorChain()是核心方法，该方法是实际网络请求的起始点。

-----------------------------------------------------------------------------------------------------------------
Interceptor
到底是什么？
"拦截器是一种强大的机制，可以监视，重写和重试调用"这是官方定义。
我的理解是:由多个拦截器构成的拦截器链，完成了一次网络请求的整个过程(该过程包括tcp连接，发送请求报文，解析响应报文
，失败以及重定向操作)，其中每一个拦截对应这次网络请求的一环，每个拦截器的分工明确，各司其职。


做了哪些事
1：拦截之前做准备工作。
2：执行Interceptor内部定义接口Chain的proceed(),交给下一个节点的拦截器去做内部定义的事情并等待下个节点的回应。
3：当前拦截器拿到下一个拦截器做完事情的响应，然后继续做后续的事情。


重要方法
intercept():
拦截器实例要实现的方法。


分类：
重试与重定向拦截器(RetryAndFollowUpInterceptor):该拦截器具备个功能，失败重试以及重定向到"Location"中指定的新URL所
指向的页面。
桥接拦截器(BridgeInterceptor)：组装请求报文以及对响应报文做必要的修改。
缓存拦截器(CacheInterceptor)：对响应报文内容进行缓存。
连接拦截器：
网络拦截器：
-----------------------------------------------------------------------------------------------------------------
分析exqueue()内部执行流程

Dispatcher:
enqueue()
1:把准备要执行的AsyncCall添加到"readyAsyncCalls"队列中.
2:调用promoteAndExecute()
	2.1:遍历"readyAsyncCalls"队列，把可执行的Call添加至"runningAsyncCalls"队列中(判断条件:查看
runningAsyncCalls中正在执行的异步请求是否超过了maxRequests限制,如果超过了则break。注意此时刚添加的异步Call还
在"readyAsyncCalls"队列中)。
	2.2:执行AsyncCall的executeOn(),把上一步获得的AsyncCall添加至Dispatcher定义的线程池中去执行(该线程池可外部
指定，在构造OkHttpClient时指定)。


AsyncCall
execute():
1:执行ReadCall的getResponseWithInterceptorChain(),该方法是核心也是从此时开始了网络任务的执行


ReadCall
getResponseWithInterceptorChain()

该方法做的事情
1:构造拦截器链:把设置的应用拦截器,重试与重定向拦截器，桥接拦截器，缓存拦截器，连接拦截器，网络拦截器组装成一个拦
截器链。
2:通过 拦截器链，原始Request,超时时间等构造一个RealInterceptorChain。
3:调用RealInterceptorChain的proceed()开始执行网络请求。每次其中一个链上的拦截器工作执行完毕后，都会重新调用
RealInterceptorChain的intercept()来通知进行后续的拦截器去工作。

