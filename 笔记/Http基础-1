报文
-请求报文
-响应报文

请求报文
-请求行(method+path+http版本)
--method:client采用何种请求方式获取数据。
--path:一些查询信息,这是给服务器看的。
--http版本:client端的http协议的版本号
-Headers
-Body

响应报文
-状态行(http版本+状态码+状态短语)
--http版本:服务端http协议的版本号
--状态码:描述此次请求是否成功，是服务端给client端看的。
--状态短语:对状态码所表达的意思的一个简单说明。
-Headers
-Body

Method
GET:只用来"获取资源"。是没有Body，请求的参数是放在path中的。
POST:增加或者修改资源。有Body，请求参数放在Body中。
PUT:只用来修改资源。有Body，请求参数放在Body中。
DELETE:删除资源。没有Body，请求参数放在path中。
HEAD:与GET相似，也是用来获取资源，但是与GET不同的地方是"用此方法接收到的响应报文是不含Body的"。该方法可以根据返回的Headers获取资源的大小，类型等。也可根据返回的状态码来确定资源是否存在，是否被修改了。

状态码
作用:状态码是一组整数，用于对响应结果做一个"类型化"描述。通俗点说，就是对请求结果做一个大概的说明。例如，获取数据成功，请求失败等等，对这些情况用一些"数字去描述"。

取值:
-1xx:临时性消息，
--100:服务端收到了客户端发送的请求报文实体中的数据,告诉客户端请继续后续数据的发送。当客户端要发送一个比较大的数据的时候，客户端想分块去发，此时可以在请求报文中添加上“Expect”首部(Expect : 100),当服务端接受到带"Expect"的报文时，处理完毕后会发送一个状态码为100的响应报文。
--101:服务端是否支持客户端请求时在 “Update 首部”指定的协议来传输数据。当客户端想要询问服务端是否支持http2的时候，会在请求报文的Header中添加上"Upgrade"Header，服务端如果支持的话，会在响应报文的状态行中返回101这个状态码。
-2xx:成功，表示服务端成功处理了此次client请求。
--200——OK：请求成功。请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。
--201——Accepted：资源创建成功。请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。用于通过我post/put向服务端传数据。
--204——No Content：服务器成功处理了请求，但是响应报文中没有body，只会把更新后的Header返回。
-3xx:重定向，表示"通过url要访问的服务器功能或某个页面对应的地址已经发生了更改"。
--301:永久性迁移，需要从响应报文中的"Locations"首部获取指定的url再去访问。这个状态码表示，访问的页面的地址已经改了，以后都用新改的那个url来访问吧。
--302:临时迁移，需要从响应报文中的"Locations"首部获取指定的url再去访问。此状态码表示，访问的页面临时性出了点问题，需要先去别的页面逛逛。但是此次以后的请求还应该用原来的地址去访问，因为可能在下次访问的时候，页面恢复了正常。
--304:内容没改变，可以用旧数据。当访问的页面的内容没变，需要告诉客户端直接拿旧数据显示就好了。
-4xx:客户端错误，表示"由于客户端存在错误导致返回的结果不正确，这些错误是由客户端导致的"。
--400——Bad Request：请求有问题，可能参数不对。
--401——Unauthorized:认证失败，当前请求需要用户验证。
--403——Forbidden:服务器已经理解请求，但是它拒绝执行。
--404——Not Found:内容未找到，请求需要的资源没有在服务器找到。
-5xx:服务器错误，表示"由于服务端存在错误导致返回的结果不正确，这些错误是由服务端导致的"。。
--500：服务器内部错误，一般该错误产生的原因是因为服务端内部源代码出现错误，错误产生在服务端。


Header：
定义：保存了Http消息的"元数据"。
元数据：meta data。"meta指的是"什么的什么"。元数据就是"数据的数据"，可以理解为"数据的属性"，是用来"修饰"数据的。
理解:采用post发送一个json串，这个json串是就是数据，而header则对这些数据做了说明，方便服务端明白接受的是什么数据。例如Content-Length表示数据有多长，Content-Type表示数据的类型。

Host:
定义:服务器主机地址
作用:用于告诉IP地址指向的服务器，我想要具体访问的是其下在哪个虚机主机中跑着的程序。一个真实的服务器中可以开多个虚拟主机。

Content-Type:★★★
定义:内容的类型。
分类:
-text/html:html文本，用于响应报文中，指定返回的数据的类型是一个html文本。用于浏览器页面的响应。
-application/json:json格式数据，指定返回的数据类型是json格式数据。用于Web Api或者post/put()
-application/x-www-form-urlencoded:普通表单，"url encoded"格式。用于提交普通表单(纯文本格式的)数据。服务器在知道客户端采用post/put方式提交的是这种类型数据后，会去请求报文中的Body中获取数据。通过此该方式提交的数据与通过get方法把数据组装到url中的格式是一样的，都是采用"&"符号连接。
-multipart/form-data:多部分形式，一般用于传输包含二进制内容(图片，视频，音频这些)的数据。可以只用于传二进制，也可以只用于传纯文本(这样会很浪费空间)，也可以纯文本+二进制数据一起传。
-image/jpeg/png等等:用于提交"单文件"。


Content-Length:
内容的长度，单位是字节。

Location:重定向的目标URL。响应报文的状态码是3开头的话，服务端会告诉客户端需要拿哪个新url去访问，这个新url就存在响应报文中location的Header中。

User-Agent:用户代理，是一个身份的说明。表示此次网络请求是谁发起请求的。

Range/Accept-Range:
定义:指定Body的内容范围。
作用:当目标服务器支持 分段下载的时候。用于"断点续传"，"分段下载"。
使用:在请求报文中添加"Range" Header。例如:"Range:bytes=0-1000"

缓存相关
Cache-Control
-no-cache:客户端可用缓存响应报文中实体中的数据，但是在下次再要访问这个资源的时候，客户端需要先问问服务器这个资源失效了没。
-no-store:没有缓存。
-max-age:缓存最大失效时间。
-private/public:要求 一趟网络交互过程中，除了客户端与目标服务器外，整个网路请求所经历的额外服务器，这些中间设备 是否缓存数据。如果是公共数据可以缓存完，如果同一个页面不同的人的不一样，则不能。例如个人信息页面就不能要求中间节点缓存。public缓存，private 不缓存。

Last-Modified:资源最近修改时间。

Etag:


Cache与Buffer的区别？
cache是缓存，Buffer是缓冲。
缓存的意思是说:这个文件，数据我一会我可能还要用，我得先存起来，等一会我在用的时候直接拿过来用就好了。缓存是在数据可能会再用的情况下，为了节省时间，提高响应速度。
缓冲的意思是:Buffer是针对工作流的，有生产消息的上游，有消费消息的下游。上游会多生产一些存起来，等稍后下游会使用，这种叫Buffer。缓冲是一会肯定会用，我先存起来。例如在线播放视频的时候，会提前加载一些，类似这种提前先多做一些存起来等稍后给下游使用。

参考:
https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin

